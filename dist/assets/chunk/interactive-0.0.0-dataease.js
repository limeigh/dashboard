import{a1 as g}from"./vue-0.0.0-dataease.js";import{b as p,ag as w}from"./index-0.0.0-dataease.js";import{c as m,e as h}from"./dataVisualization-0.0.0-dataease.js";import{a as v}from"./dataset-0.0.0-dataease.js";import{l as I}from"./datasource-0.0.0-dataease.js";import{p as y}from"./ConfigGlobal.vue_vue_type_script_setup_true_lang-0.0.0-dataease.js";import{useAppStoreWithOut as N}from"./app-0.0.0-dataease.js";const l=N(),{wsCache:r}=p(),D=[h,h,v,I],c=["dashboard","dataV","dataset","datasource"],M=g("interactive",{state:()=>({data:{}}),getters:{getPanel(){return this.data[0]},getScreen(){return this.data[1]},getDataset(){return this.data[2]},getDatasource(){return this.data[3]},getData(){return this.data}},actions:{async setInteractive(e,a){const t=c.findIndex(n=>n===e.busiFlag);if(!u(t)&&!window.DataEaseBi&&!l.getIsIframe){const n={rootManage:!1,anyManage:!1,treeNodes:[],leafNodeCount:0,menuAuth:!1};return this.data[t]=n,t===0&&r.set("panel-weight",{}),t===1&&r.set("screen-weight",{}),[]}let s=a;if(!a){const n=D[t];s=await n(e)}return this.data[t]=b(s),t===0&&r.set("panel-weight",d(this.data[t])),t===1&&r.set("screen-weight",d(this.data[t])),s},async initInteractive(e){if(e){await this.loadBusiInteractive();return}let a=4;for(;a--;)if(!this.data[a]||e){const t={busiFlag:c[a]};await this.setInteractive(t)}},async loadBusiInteractive(){const e={};for(let t=0;t<c.length;t++){const s=c[t];(window.DataEaseBi||l.getIsIframe||u(t))&&(e[s]={busiFlag:s})}const a=await m(e);for(const t in a){const s=a[t];this.setInteractive(e[t],s)}},clear(){this.data={},r.set("panel-weight",{}),r.set("screen-weight",{})}}}),k=()=>M(w),b=e=>{var n;const a={rootManage:e[0].weight>=7,anyManage:!1,treeNodes:e||[],leafNodeCount:0,menuAuth:!0},t=[...e];let s=0;for(;t.length;){const i=t.pop();!i.leaf&&i.weight>=7&&(a.anyManage=!0),i.leaf&&i.weight&&++s,(n=i==null?void 0:i.children)!=null&&n.length&&i.children.forEach(o=>t.push(o))}return a.leafNodeCount=s,a},u=e=>{let a="/panel/index";return e===1?a="/screen/index":e===2?a="/data/dataset":e===3&&(a="/data/datasource"),y(a)},d=e=>{var n;if(!(e!=null&&e.leafNodeCount))return{};const a={},s=[...e.treeNodes];for(;s.length;){const i=s.pop();if(i.leaf){const{id:o,weight:f}=i;a[o]=f}(n=i.children)!=null&&n.length&&i.children.forEach(o=>s.push(o))}return a};export{k as i};
